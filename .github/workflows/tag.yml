on:
  workflow_dispatch:
    inputs:
      target-environment:
        type: string
        description: The environment you are promoting to
        options:
          - qa
          - uat
          - prod
      searchapi-tag:
        type: string
        description: The tag of the searchapi image being promoted
      web-tag:
        type: string
        description: The tag of the web image being promoted
  workflow_call:
    inputs:
      target-environment:
        type: string
        description: The environment you are promoting to
      searchapi-tag:
        type: string
        description: The tag of the searchapi image being promoted
      web-tag:
        type: string
        description: The tag of the web image being promoted
    secrets:
      AWS_ACCOUNT:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_REGION:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  tag:
    name: Tag Images for Promotion
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get-tags.outputs.environment }}
    steps:
      - name: Configure AWS credentials
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get Source and Target Tag for Images
        id: get-tags
        run: |
          SOURCE_ENV=""
          TARGET_ENV=""
          if [ "${{ inputs.target-environment }}" = "qa" ]; then
            SOURCE_ENV=""
            TARGET_ENV="qa"
          elif [ "${{ inputs.target-environment }}" = "uat" ]; then
            SOURCE_ENV="qa"
            TARGET_ENV="uat"
          else
            SOURCE_ENV="uat"
            TARGET_ENV="prod"
          fi
          OLD_SEARCHAPI_TAG="${SOURCE_ENV}-${{ inputs.searchapi-tag }}"
          NEW_SEARCHAPI_TAG="${TARGET_ENV}-${{ inputs.searchapi-tag }}"
          OLD_WEB_TAG="${SOURCE_ENV}-${{ inputs.web-tag }}"
          NEW_WEB_TAG="${TARGET_ENV}-${{ inputs.web-tag }}"

          # If promoting to qa then it doesn't have a prefix
          if [ "${{ inputs.target-environment }}" = "qa" ]; then
            echo "test"
            OLD_SEARCHAPI_TAG="${{ inputs.searchapi-tag }}"
            OLD_WEB_TAG="${{ inputs.web-tag }}"
          fi
            
          echo "OLD_SEARCHAPI_TAG=$OLD_SEARCHAPI_TAG" >> $GITHUB_ENV
          echo "NEW_SEARCHAPI_TAG=$NEW_SEARCHAPI_TAG" >> $GITHUB_ENV
          echo "OLD_WEB_TAG=$OLD_WEB_TAG" >> $GITHUB_ENV
          echo "NEW_WEB_TAG=$NEW_WEB_TAG" >> $GITHUB_ENV
          # Set the output of the step
          echo "environment=$TARGET_ENV" >> $GITHUB_OUTPUT

          echo "OLD_SEARCHAPI_TAG: $OLD_SEARCHAPI_TAG"
          echo "NEW_SEARCHAPI_TAG: $NEW_SEARCHAPI_TAG"
      - name: Re-tag and push images
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Pulling old images"
          docker pull $ECR_REGISTRY/searchapi:$OLD_SEARCHAPI_TAG
          docker pull $ECR_REGISTRY/web:$OLD_WEB_TAG
          echo "Re-tagging images"
          docker tag $ECR_REGISTRY/searchapi:$OLD_SEARCHAPI_TAG $ECR_REGISTRY/searchapi:$NEW_SEARCHAPI_TAG
          docker tag $ECR_REGISTRY/web:$OLD_WEB_TAG $ECR_REGISTRY/web:$NEW_WEB_TAG
          echo "Pushing new tags"
          docker push $ECR_REGISTRY/searchapi:$NEW_SEARCHAPI_TAG
          docker push $ECR_REGISTRY/web:$NEW_WEB_TAG
