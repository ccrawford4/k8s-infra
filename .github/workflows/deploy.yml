name: Deploy Helm Charts

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      AWS_ACCOUNT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_EKS_CLUSTER_NAME:
        required: true
      MYSQL_DATABASE:
        required: true
      MYSQL_USERNAME:
        required: true
      MYSQL_PASSWORD:
        required: true
      MYSQL_ROOT_PASSWORD:
        required: true
      GH_CLIENT_ID:
        required: true
      GH_SECRET:
        required: true
      NEXTAUTH_SECRET:
        required: true
      GOOGLE_ID:
        required: true
      GOOGLE_SECRET:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} \
            --kubeconfig ./kubeconfig.yaml

      - name: Create environment namespace if not exists
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl get namespace ${{ inputs.environment }} || kubectl create namespace ${{ inputs.environment }}

      - name: Create argocd namespace if not exists
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl get namespace argocd || kubectl create namespace argocd

      - name: Deploy ArgoCD
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Set charts to deploy
        id: set-charts
        run: |
          if [ ${{ inputs.environment }} == "qa" ]; then
            echo "charts=searchapi mysql web redis" >> $GITHUB_ENV
          else
            echo "charts=searchapi web redis" >> $GITHUB_ENV
          fi

      - name: Deploy mysql chart
        if: contains(env.charts, 'mysql')
        uses: vimeda/helm@v1.7.0
        with:
          release: mysql
          namespace: ${{ inputs.environment }}
          chart: ./charts/mysql
          values: |
            database: ${{ secrets.MYSQL_DATABASE }}
            username: ${{ secrets.MYSQL_USERNAME }}
            password: ${{ secrets.MYSQL_PASSWORD }}
            root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy redis chart
        if: contains(env.charts, 'redis')
        uses: vimeda/helm@v1.7.0
        with:
          release: redis
          namespace: ${{ inputs.environment }}
          chart: ./charts/redis
          values: |
            password: ${{ secrets.REDIS_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy searchapi chart
        if: contains(env.charts, 'searchapi')
        uses: vimeda/helm@v1.7.0
        with:
          release: searchapi
          namespace: ${{ inputs.environment }}
          chart: ./charts/searchapi
          values: |
            containerPort: 8080
            DSN: "root:${{ secrets.MYSQL_ROOT_PASSWORD }}@tcp(mysql.${{ inputs.environment }}.svc.cluster.local:3306)/${{ secrets.MYSQL_DATABASE }}?charset=utf8mb4&parseTime=true&loc=Local"
            REDIS_HOST: "redis.${{ inputs.environment }}.svc.cluster.local:6379"
            REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy the Ingress controller
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          helm -n ${{ inputs.environment }} repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm -n ${{ inputs.environment }} repo update
          helm -n ${{ inputs.environment }} upgrade ingress-nginx ingress-nginx/ingress-nginx --install

      - name: Deploy the Ingress service
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: kubectl -n ${{ inputs.environment }} apply -f k8s/ingress.yaml

      - name: Get the Ingress IP/hostname
        env:
          KUBECONFIG: ./kubeconfig.yaml
        id: get-ingress-host
        run: |
          echo "Getting ingress host information..."
          # Wait for ingress to be ready and have an address
          attempts=0
          max_attempts=30
          until [ $attempts -ge $max_attempts ]
          do
            INGRESS_HOST=$(kubectl -n ${{ inputs.environment }} get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
            if [ -z "$INGRESS_HOST" ]; then
              INGRESS_HOST=$(kubectl -n ${{ inputs.environment }} get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
            fi
            
            if [ -n "$INGRESS_HOST" ]; then
              break
            fi
            
            attempts=$((attempts+1))
            echo "Waiting for ingress to get external address... (Attempt: $attempts/$max_attempts)"
            sleep 10
          done

          if [ -z "$INGRESS_HOST" ]; then
            echo "::error::Failed to get ingress host after multiple attempts"
            exit 1
          fi

          echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV
          echo "Found ingress host: $INGRESS_HOST"

      - name: Deploy web chart
        if: contains(env.charts, 'web')
        uses: vimeda/helm@v1.7.0
        with:
          release: web
          namespace: ${{ inputs.environment }}
          chart: ./charts/web
          values: |
            API_ENDPOINT: ${{ env.INGRESS_HOST }}
            NEXTAUTH_URL: ${{ env.INGRESS_HOST}}/api/auth
            GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
            GITHUB_SECRET: ${{ secrets.GH_SECRET }}
            NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
            GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
            GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
        env:
          KUBECONFIG: ./kubeconfig.yaml
