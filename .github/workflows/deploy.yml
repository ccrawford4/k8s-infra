name: Deploy Helm Charts

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "Target environment (e.g. qa, uat, prod)"
      searchapi-tag:
        type: string
        required: true
        description: "Tag for the searchapi image"
      web-tag:
        type: string
        required: true
        description: "Tag for the web image"
    secrets:
      AWS_ACCOUNT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_EKS_CLUSTER_NAME:
        required: true
      MYSQL_DATABASE:
        required: true
      MYSQL_USERNAME:
        required: true
      MYSQL_PASSWORD:
        required: true
      MYSQL_ROOT_PASSWORD:
        required: true
      GH_CLIENT_ID:
        required: true
      GH_SECRET:
        required: true
      NEXTAUTH_SECRET:
        required: true
      GOOGLE_ID:
        required: true
      GOOGLE_SECRET:
        required: true
      REDIS_PASSWORD:
        required: true
      ECR_REGISTRY:
        required: true
      DSN:
        required: true
      HOSTNAME:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} \
            --kubeconfig ./kubeconfig.yaml

      - name: Create namespaces
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl get namespace ${{ inputs.environment }} || kubectl create namespace ${{ inputs.environment }}
          kubectl get namespace ingress-nginx || kubectl create namespace ingress-nginx
          kubectl get namespace argocd || kubectl create namespace argocd

      - name: Install ArgoCD
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Install Argo Rollouts
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl apply -n argocd -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml

      - name: Set charts to deploy
        id: set-charts
        run: |
          if [ "${{ inputs.environment }}" == "qa" ]; then
            echo "charts=searchapi mysql web redis" >> $GITHUB_ENV
          else
            echo "charts=searchapi web redis" >> $GITHUB_ENV
          fi

      - name: Deploy Ingress Controller
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          helm upgrade --install ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx

      - name: Deploy MySQL chart
        if: contains(env.charts, 'mysql')
        uses: vimeda/helm@v1.7.0
        with:
          release: mysql
          namespace: ${{ inputs.environment }}
          chart: ./charts/mysql
          values: |
            database: ${{ inputs.environment }}
            username: ${{ secrets.MYSQL_USERNAME }}
            password: ${{ secrets.MYSQL_PASSWORD }}
            root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy Redis chart
        if: contains(env.charts, 'redis')
        uses: vimeda/helm@v1.7.0
        with:
          release: redis
          namespace: ${{ inputs.environment }}
          chart: ./charts/redis
          values: |
            password: ${{ secrets.REDIS_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Re-Deploy SearchAPI chart
        if: inputs.environment == 'qa'
        uses: vimeda/helm@v1.7.0
        with:
          release: searchapi
          namespace: ${{ inputs.environment }}
          chart: ./charts/searchapi
          values: |
            containerPort: 8080
            image:
              repository: ${{ secrets.ECR_REGISTRY }}/searchapi
              tag: ${{ inputs.environment }}-${{ inputs.searchapi-tag }}
            DSN: ${{ secrets.DSN }}
            REDIS_HOST: redis.${{ inputs.environment }}.svc.cluster.local:6379
            REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Blue/Green Rollout SearchAPI service
        if: inputs.environment != 'qa'
        run: |
          envsubst < k8s/searchapi-rollout.yaml > k8s/searchapi-rollout-processed.yaml
          kubectl -n $NAMESPACE apply -f k8s/searchapi-rollout-processed.yaml
        env:
          NAMESPACE: ${{ inputs.environment }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ inputs.searchapi-tag }}
          DSN: ${{ secrets.DSN }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy Ingress service
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: kubectl apply -f k8s/ingress.yaml

      - name: Deploy Web chart
        if: contains(env.charts, 'web')
        uses: vimeda/helm@v1.7.0
        with:
          release: web
          namespace: ${{ inputs.environment }}
          chart: ./charts/web
          values: |
            image:
              repository: ${{ secrets.ECR_REGISTRY }}/web
              tag: ${{ inputs.environment }}-${{ inputs.web-tag }}
            API_ENDPOINT: http://${{ secrets.HOSTNAME }}/search
            NEXTAUTH_URL: http://${{ secrets.HOSTNAME }}/api/auth
            GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
            GITHUB_SECRET: ${{ secrets.GH_SECRET }}
            NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
            GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
            GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Print deployment URLs
        run: |
          echo "Deployment complete!"
          echo "Application is accessible at: http://${{ env.INGRESS_HOST }}"
