name: Deploy Helm Charts

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "Target environment (e.g. qa, uat, prod)"
      searchapi-tag:
        type: string
        required: true
        description: "Tag for the searchapi image"
      web-tag:
        type: string
        required: true
        description: "Tag for the web image"
      statsapi-tag:
        type: string
        required: true
        description: "Tag for the statsapi image"
    secrets:
      AWS_ACCOUNT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_EKS_CLUSTER_NAME:
        required: true
      MYSQL_DATABASE:
        required: true
      MYSQL_USERNAME:
        required: true
      MYSQL_PASSWORD:
        required: true
      MYSQL_ROOT_PASSWORD:
        required: true
      GH_CLIENT_ID:
        required: true
      GH_SECRET:
        required: true
      NEXTAUTH_SECRET:
        required: true
      GOOGLE_ID:
        required: true
      GOOGLE_SECRET:
        required: true
      REDIS_HOST:
        required: true
      REDIS_PASSWORD:
        required: true
      ECR_REGISTRY:
        required: true
      DSN:
        required: true
      HOSTNAME:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} \
            --kubeconfig ./kubeconfig.yaml

      - name: Create namespaces
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          kubectl get namespace ${{ inputs.environment }} || kubectl create namespace ${{ inputs.environment }}
          kubectl get namespace ingress-nginx || kubectl create namespace ingress-nginx
          kubectl get namespace argo-rollouts || kubectl create namespace argo-rollouts

      - name: Install Argo-Rollouts
        run: kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy Ingress Controller
        env:
          KUBECONFIG: ./kubeconfig.yaml
        run: |
          helm upgrade --install ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx

      - name: Deploy MySQL chart
        if: inputs.environment == 'qa'
        uses: vimeda/helm@v1.7.0
        with:
          release: mysql
          namespace: ${{ inputs.environment }}
          chart: ./charts/mysql
          values: |
            database: ${{ inputs.environment }}
            username: ${{ secrets.MYSQL_USERNAME }}
            password: ${{ secrets.MYSQL_PASSWORD }}
            root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy Redis chart
        uses: vimeda/helm@v1.7.0
        with:
          release: redis
          namespace: ${{ inputs.environment }}
          chart: ./charts/redis
          values: |
            password: ${{ secrets.REDIS_PASSWORD }}
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Install Argo Rollouts kubectl plugin
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Blue/Green rollout for services
        run: |
          kubectl -n $NAMESPACE apply -f k8s/service.yaml
          envsubst < k8s/rollout.yaml | kubectl -n $NAMESPACE apply -f -
          kubectl argo rollouts set image searchapi searchapi="$ECR_REGISTRY/searchapi:$SEARCHAPI_IMAGE_TAG" -n $NAMESPACE
          kubectl argo rollouts set image web web="$ECR_REGISTRY/web:$WEB_IMAGE_TAG" -n $NAMESPACE
          kubectl argo rollouts set image statsapi statsapi="$ECR_REGISTRY/statsapi:$STATSAPI_IMAGE_TAG" -n $NAMESPACE
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ inputs.web-tag }}
          NAMESPACE: ${{ inputs.environment }}
          API_ENDPOINT: https://${{ secrets.HOSTNAME }}/search
          NEXTAUTH_URL: https://${{ secrets.HOSTNAME }}/api/auth
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
          GITHUB_SECRET: ${{ secrets.GH_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          KUBECONFIG: ./kubeconfig.yaml
          SEARCHAPI_IMAGE_TAG: ${{ inputs.searchapi-tag }}
          STATSAPI_IMAGE_TAG: ${{ inputs.statsapi-tag }}
          WEB_IMAGE_TAG: ${{ inputs.web-tag }}
          DSN: ${{ secrets.DSN }}
          REDIS_HOST: redis.${{ inputs.environment }}.svc.cluster.local:6379
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      - name: Deploy the cert manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml
          kubectl apply -f k8s/cluster-issuer.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Deploy ingress
        run: kubectl apply -f k8s/ingress.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml
